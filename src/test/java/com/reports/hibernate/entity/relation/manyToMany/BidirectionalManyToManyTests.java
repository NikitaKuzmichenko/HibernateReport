package com.reports.hibernate.entity.relation.manyToMany;

import com.reports.hibernate.base.BaseTest;
import com.reports.hibernate.model.entity.relation.manyToMany.bidirectional.BidirectionalManyToManyPet;
import com.reports.hibernate.model.entity.relation.manyToMany.bidirectional.BidirectionalManyToManyOwner;
import com.reports.hibernate.sql.query.assertion.AssertQueryCount;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.autoconfigure.domain.EntityScan;

import java.util.HashSet;
import java.util.Set;

@EntityScan("com.reports.hibernate.model.entity.relation.manyToMany.bidirectional") // scan only required entities
@DisplayName("Bidirectional ManyToMany relationhip")
class BidirectionalManyToManyTests extends BaseTest {

    @Test
    @DisplayName("One sided saving of owners")
    void oneSidedSaveOfParent() {
        int ownersAmount = 3;
        int petsAmount = 3;
        Set<BidirectionalManyToManyPet> pets = generatePets(ownersAmount);
        Set<BidirectionalManyToManyOwner> owners = generateOwners(petsAmount);

        for (BidirectionalManyToManyOwner parent : owners) {
            parent.setPets(pets);
            session.persist(parent);
            session.flush();
        }

        assertAll(
                () -> assertNull(pets.iterator().next().getOwners()),
                // hibernate won't set inverse references automatically
                () -> AssertQueryCount.assertInsertCount(
                        petsAmount + ownersAmount + petsAmount * petsAmount)
        );
    }

    @Test
    @DisplayName("One sided saving of owners. Using of consistent setters")
    void oneSidedConsistentSaveOfParent() {
        int ownersAmount = 3;
        int petsAmount = 3;
        Set<BidirectionalManyToManyPet> pets = generatePets(ownersAmount);
        Set<BidirectionalManyToManyOwner> owners = generateOwners(petsAmount);

        for (BidirectionalManyToManyOwner parent : owners) {
            parent.setChildrenConsistently(pets);
            session.persist(parent);
            session.flush();
        }

        assertAll(
                () -> assertEquals(pets.iterator().next().getOwners().size(), ownersAmount),
                () -> AssertQueryCount.assertInsertCount(
                        petsAmount + ownersAmount + petsAmount * petsAmount)
        );
    }

    @Test
    @DisplayName("One sided saving of pets")
    void oneSidedSaveOfChild() {
        int ownersAmount = 3;
        int petsAmount = 3;
        Set<BidirectionalManyToManyPet> pets = generatePets(ownersAmount);
        Set<BidirectionalManyToManyOwner> owners = generateOwners(petsAmount);

        for (BidirectionalManyToManyPet child : pets) {
            child.setOwners(owners);
            session.persist(child);
            session.flush();
        }

        assertAll(
                () -> AssertQueryCount.assertInsertCount(petsAmount)
        );
    }


    private Set<BidirectionalManyToManyPet> generatePets(int amount) {
        Set<BidirectionalManyToManyPet> result = new HashSet<>();
        for (int i = 0; i < amount; i++) {
            BidirectionalManyToManyPet pet = new BidirectionalManyToManyPet();
            // id autogenerated
            pet.setName("Pet number " + i);
            result.add(pet);
        }
        return result;
    }

    private Set<BidirectionalManyToManyOwner> generateOwners(int amount) {
        Set<BidirectionalManyToManyOwner> result = new HashSet<>();
        for (int i = 0; i < amount; i++) {
            BidirectionalManyToManyOwner owner = new BidirectionalManyToManyOwner();
            // id autogenerated
            owner.setName("Owner number " + i);
            result.add(owner);
        }
        return result;
    }

}
